name: Windows Acceptance Test
run-name: Windows Acceptance Test (Triggered by ${{ github.event_name }} by @${{ github.actor }})
on:
  workflow_dispatch:
    inputs:
      GPU_FAMILY:
        description: 'GPU Family'
        required: true
        type: string
      TEST_REPO:
        description: 'Test repository'
        required: true
        type: string
      PACKAGE:
        description: 'Built package'
        required: true
        type: string
      DEBUG:
        description: 'Is debug build'
        required: false
        default: false
        type: boolean
      NONFATAL:
        description: 'Errors are nonfatal'
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      GPU_FAMILY:
        description: 'GPU Family'
        required: true
        type: string
      TEST_REPO:
        description: 'Test repository'
        required: true
        type: string
      PACKAGE:
        description: 'Built package'
        required: true
        type: string
      DEBUG:
        description: 'Built package'
        required: false
        default: false
        type: boolean
      NONFATAL:
        description: 'Errors are nonfatal'
        required: false
        default: false
        type: boolean
        
jobs:
  acceptance:
    continue-on-error: ${{ inputs.NONFATAL }}
    name: Acceptance Test for ${{ inputs.PACKAGE }} on ${{ inputs.GPU_FAMILY }}
    runs-on: [self-hosted, Windows, CMake, vs2022, "${{ inputs.GPU_FAMILY }}"]
    steps:
      - name: Check Out Tests
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.TEST_REPO }}
          token: ${{ secrets.TEST_REPO_TOKEN }}
          path: oneVPL-tests
      - name: Dowload build
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.PACKAGE }}
          path: package
      - name: Install
        run: |
          if (Test-Path -Path install) {
            Remove-Item -Recurse -Force install
          }
          New-Item -Path 'install' -ItemType Directory
          Expand-Archive -Force -Path package\*.zip -DestinationPath install
          if (Test-Path -Path package) {
            Remove-Item -Recurse -Force package
          }
      - name: Test
        continue-on-error: ${{ inputs.NONFATAL }}
        run: |
          $env_script=""
          if (Test-Path -Path install\share\oneVPL\env\vars.bat) {
            $env_script="install\share\oneVPL\env\vars.bat"
          }
          if (Test-Path -Path install\etc\vpl\vars.bat) {
            $env_script="install\etc\vpl\vars.bat"
          }
          & cmd /c "$env_script & set" |
            Select-String '^([^=]*)=(.*)$' |
            ForEach-Object {
              $varName = $_.Matches[0].Groups[1].Value
              $varValue = $_.Matches[0].Groups[2].Value
              Set-Item Env:$varName $varValue
          }
          $Env:DASHBOARD_INSTALL_ONEVPLCPU_LICENSE = "gpl"
          $Env:DASHBOARD_INSTALL_ONEVPL32 = "0"
          $Env:DASHBOARD_INSTALL_ONEVPLDEBUG = "${{ fromJSON('[0, 1]')[inputs.DEBUG] }}"
          $Env:DASHBOARD_PLATFORM_HW_CPU_MICROARCHITECTURE = "whl"
          $Env:DASHBOARD_PLATFORM_HW_INTEGRATED_GPU = "${{ inputs.GPU_FAMILY }}"
          $Env:DASHBOARD_PLATFORM_OS_FAMILY = "windows"
          $Env:DASHBOARD_PLATFORM_OS_VERSION = "11"
          $Env:DASHBOARD_PLATFORM_SW_CMAKE_INSTALLED = "1"
          $Env:DASHBOARD_PLATFORM_SW_VISUAL_STUDIO_INSTALLED = "1"
          cd oneVPL-tests
          & .\run.bat gen
      - name: Record Artifacts
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: acceptance-${{ inputs.PACKAGE }}-${{ inputs.GPU_FAMILY }}
          path: oneVPL-tests/logs
      - name: Cleanup
        if: always()
        run: |
          if (Test-Path -Path oneVPL-tests) {
            Remove-Item -Recurse -Force oneVPL-tests
          }
          if (Test-Path -Path package) {
            Remove-Item -Recurse -Force package
          }
          if (Test-Path -Path install) {
            Remove-Item -Recurse -Force install
          }
