name: Build
run-name: Build (Triggered by ${{ github.event_name }} by @${{ github.actor }})
on:
  workflow_dispatch:
    inputs:
      BUILD_CONFIG:
        description: Build configuration
        required: false
        default: Release
        type: choice
        options: 
          - Release
          - Debug
      PACKAGE_NAME:
        description: Package artifact name
        required: false
        default: linux-build
        type: string
  workflow_call:
    inputs:
      BUILD_CONFIG:
        description: Build configuration
        required: false
        default: Release
        type: string
      PACKAGE_NAME:
        description: Package artifact name
        required: false
        default: linux-build
        type: string
  
jobs:
  build:
    name: ${{ inputs.BUILD_CONFIG }} Config
    runs-on: [self-hosted, Linux, docker]
    steps:
      - name: Clean
        if: always()
        run: |
          docker run --rm -v $PWD:/working -w/working ubuntu:20.04 rm -rf ./*
          rm -f Dockerfile action.sh
          rm -rf _build _install

      - name: Check Out Code
        uses: actions/checkout@v3

      - name: Write Docker File
        run: |
          USER_ID=$(id -u ${USER})
          GROUP_ID=$(id -g ${USER})
          # Dockerfile will contain everything between <<EOL and EOL
          cat >Dockerfile <<EOL
          FROM public.ecr.aws/docker/library/centos:7

          ARG HTTP_PROXY
          ARG HTTPS_PROXY
          ARG NO_PROXY
          ENV http_proxy ${HTTP_PROXY}
          ENV https_proxy ${HTTPS_PROXY}
          ENV no_proxy ${NO_PROXY}

          # basic build tools
          RUN yum install -y \
              centos-release-scl \
              && yum-config-manager --enable rhel-server-rhscl-7-rpms \
              && yum install -y \
              devtoolset-9

          # cmake
          RUN yum install -y \
              openssl-devel \
              && cd /tmp \
              && curl -O -L --retry 5 \
              https://github.com/Kitware/CMake/releases/download/v3.18.4/cmake-3.18.4.tar.gz \
              && tar zxvf cmake-3.* \
              && cd cmake-3.* \
              && source /opt/rh/devtoolset-9/enable \
              && ./bootstrap --prefix=/usr/local --parallel=$(nproc) \
              && make -j$(nproc) \
              && make install

          #install xcb and wayland
          RUN yum -y update \
              && yum -y install wayland-devel libX11-devel libXext-devel libXfixes-devel libpciaccess-devel \
              && cd /tmp \
              && curl -O -L --retry 5 \
              https://wayland.freedesktop.org/releases/wayland-protocols-1.15.tar.xz \
              && tar -xJf wayland-protocols-1.15.tar.xz \
              && cd wayland-protocols-1.15 \
              && ./configure --prefix="/usr" --bindir="/usr/bin" --libdir="/usr/lib64" \
              && make install

          # libva
          RUN yum install -y \
              bzip2 \
              libdrm-devel \
              && cd /tmp \
              && curl -O -L --retry 5 \
              https://github.com/intel/libva/releases/download/2.10.0/libva-2.10.0.tar.bz2 \
              && tar xjf libva-2.10.0.tar.bz2 \
              && source /opt/rh/devtoolset-9/enable \
              && cd libva-2.10.0 \
              && ./configure --prefix="/usr" --enable-wayland --enable-x11 --bindir="/usr/bin" --libdir="/usr/lib64" \
              && make \
              && make install

          # install python 3.7.9
          RUN yum -y update \
              && yum install openssl-devel libffi-devel bzip2-devel -y \
              && yum install wget -y \
              && wget https://www.python.org/ftp/python/3.7.9/Python-3.7.9.tgz \
              && tar xzf Python-3.7.9.tgz \
              && cd Python-3.7.9 \
              && ./configure --enable-optimizations \
              && make install

          # install pybind11
          RUN yum -y update && yum install wget -y \
              && cd /usr/local/src \
              && wget https://github.com/pybind/pybind11/archive/refs/tags/v2.6.2.tar.gz \
              && tar xzf v2.6.2.tar.gz \
              && cd pybind11-2.6.2 \
              && source /opt/rh/devtoolset-9/enable \
              && mkdir build \
              && cd build \
              && cmake .. \
              && make \
              && make install  

          # create devtoolset-9 entrypoint script since we can't source
          RUN echo "#!/bin/sh" > /etc/profile.d/entrypoint.sh \
              && echo ". /opt/rh/devtoolset-9/enable" >> /etc/profile.d/entrypoint.sh \
          # && echo "exec \"\$@\"" >> /tmp/entrypoint.sh \
              && chmod 755 /etc/profile.d/entrypoint.sh

          ENV BASH_ENV /etc/profile.d/entrypoint.sh

          # Enable dev tools when using this image
          #ENTRYPOINT ["/tmp/entrypoint.sh"]
          RUN groupadd -g $GROUP_ID user || true
          RUN useradd --disabled-password --gecos "" --uid $USER_ID --gid $GROUP_ID user || true
          EOL
          docker build -t vplbuild:github_runner .

      - uses: actions/checkout@v3
      - name: Bash Script
        run: |
          cat > action.sh <<EOL
          #!/bin/bash
          set -o errexit ; set -o nounset
          cmake -B _build -S /working -DENABLE_WARNING_AS_ERROR=ON \
          -DCMAKE_INSTALL_LIBDIR=lib \
          -DCMAKE_BUILD_TYPE=${{ inputs.BUILD_CONFIG }} \
          -DBUILD_TESTS=ON \
          -DBUILD_PYTHON_BINDING=ON \
          -DENABLE_VA=ON -DENABLE_DRM=ON -DENABLE_WAYLAND=ON \
          -DENABLE_X11=ON -DENABLE_DRI3=ON
          cmake --build _build --verbose
          #ctest --test-dir _build --config ${{ inputs.BUILD_CONFIG }} --output-on-failure -T test
          pushd _build
            ctest --C ${{ inputs.BUILD_CONFIG }} --output-on-failure -T test
            cpack . 
          popd
          cmake --install _build --prefix _install --config ${{ inputs.BUILD_CONFIG }}
          EOL
          chmod +x action.sh

      - name: Run Dispatcher build
        run: |
          docker run --rm -v $PWD:/working -w/working vplbuild:github_runner ./action.sh

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: ${{ inputs.PACKAGE_NAME }}
          path: _build/*-all.zip

      - name: Clean
        if: always()
        run: |
          docker run --rm -v $PWD:/working -w/working ubuntu:20.04 rm -rf ./*
          rm -f Dockerfile action.sh
          rm -rf _build _install
  