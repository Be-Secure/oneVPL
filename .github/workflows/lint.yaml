name: Lint Codebase
run-name: Lint Codebase (Triggered by ${{ github.event_name }} by @${{ github.actor }})
on:
  workflow_dispatch:
  workflow_call:

jobs:
  lint:
    runs-on: [self-hosted, Linux, docker]
    steps:
      - name: Check Out Code
        uses: actions/checkout@v3
        with:
          path: source
      - name: Create Docker Image
        run: |
          USER_ID=$(id -u ${USER})
          GROUP_ID=$(id -g ${USER})
          # Dockerfile will contain everything between <<EOL and EOL
          cat <<'EOL' > Dockerfile
          FROM ubuntu:20.04
          ARG http_proxy
          ARG https_proxy
          ARG no_proxy
          ARG USER_ID
          ARG GROUP_ID
          # Suppress oddball issues with interactive apps
          ARG DEBIAN_FRONTEND=noninteractive
          # map in any proxy settings from the environment
          ENV http_proxy ${http_proxy}
          ENV https_proxy ${https_proxy}
          ENV no_proxy ${no_proxy}
          # Main environment configuration
          RUN apt-get update && apt-get install -y --no-install-recommends python3-pip git
          RUN pip3 install -U pre-commit gitlint
          RUN git config --global safe.directory '*'
          # Set up the user to match the host so that files created can be cleaned up
          RUN addgroup --gid $GROUP_ID user
          RUN adduser --disabled-password --gecos '' --uid $USER_ID --gid $GROUP_ID user
          USER user
          EOL
          docker build -t vpllint:github_runner . \
            --build-arg "USER_ID=${USER_ID}" \
            --build-arg "GROUP_ID=${GROUP_ID}" \
            --build-arg "http_proxy=${http_proxy}" \
            --build-arg "https_proxy=${https_proxy}" \
            --build-arg "no_proxy=${no_proxy}"
      - name: Write Script
        run: |
          cat <<'EOL' > action.sh
          #!/bin/bash
          set -x
          mkdir -p /working/_logs
          cd source
          pre-commit install-hooks
          set -o pipefail
          script/lint | tee /working/_logs/lint.txt
          ret=$?
          set +o pipefail
          exit $ret
          EOL
          chmod +x action.sh
      - name: Run Test
        run: |
          docker run --rm -v $PWD:/working -w/working vpllint:github_runner ./action.sh
      - name: Report
        if: success() || failure()
        run: |
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat _logs/lint.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
      - name: Cleanup
        if: always()
        run: |
          rm -rf _logs
          rm action.sh Dockerfile
